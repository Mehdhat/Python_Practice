# -*- coding: utf-8 -*-
"""Mehdhat_day_05.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q93o9ocnnTUE5YHBUIPTcaeMus9ZlQkx
"""

hour = 10  # Assign a value to the 'hour' variable

match hour:
    case 8  | 10 | 18 | 22:
        print("Working time")
    case 13 | 16 | 20 | 24:
        print("Resting time")

def case_1():
    return "First case executed"

def case_2():
    return "Second case executed"

def case_3():
    return "Third case executed"

def default_case():
    return "Default case executed"

switch = {
    1: case_1,
    2: case_2,
    3: case_3
}

def switch_case(value):
    return switch.get(value, default_case)()

print(switch_case(2))
print(switch_case(8))

day = int(input("Enter the day: "))

match day:
  case 1 | 2 | 3 | 4 | 5:
    print("Working day")
  case 6 | 7:
    print("Holiday")

import numpy as npy
import pandas as pad

arr = npy.array([2, 4, 6, 8, 10])
print(arr)

print(arr.ndim)

import numpy as npy
import pandas as pad

arr = npy.array([[2, 4, 6, 8, 10], [1, 3, 5, 7, 9]])
print(arr)

print(arr.ndim)

import numpy as npy
import pandas as pad

arr = npy.array([[2, 4, 6, 8, 10], [1, 3, 5, 7, 9]])
print(arr)

print(arr.ndim)

list=[]
for i in range(2,8):
    list.append(i)
print(list)

#print zero arrays
z_arr = npy.zeros((6, 4))
print(z_arr)

#print one arrays
one_arr = npy.ones((6, 4))
print(one_arr)

arr=npy.empty((5))
arr1=npy.empty((1, 2))

print(arr)
print(arr1)

arrangement = npy.arange(0, 100, 10)
print(arrangement)

range_arr=npy.arange(2,20)
print(range_arr)

piece = npy.linspace(0, 2, 10)
print(piece)

array_arr = npy.array([1, 2, 3, 4, 5, 4,6,4,4,2,9,4,6,7,9,1])
array_arr1 = array_arr.reshape((4, 4))
print(array_arr1)

arr1 = npy.array([1, 2, 3, 4, 5, 6])
arr1_reshaped = arr1.reshape((2, 3))
print(arr1_reshaped)

a = npy.array([2, 3, 5])
b = npy.array([6, 8, 9])
c = npy.concatenate((a, b))
print(c)

random=npy.random.rand(5,6)
print(random)

arr = npy.random.rand(2, 3).astype("f")

print("Datetype is : ", type(arr))
print(arr.dtype)

a = npy.array([5, 8, 3])
b=a+4
print(b)

arr = npy.array([[1, 2, 3], [4, 5, 6]])
no_dimensions = arr.ndim
print(no_dimensions)

a=npy.array([2,4,3])
b=npy.array([4,5,8])
c=npy.array([8,4,9])
d=a+b+c
e=a-b-c
f=a*b*c
g=a/b/c
print(d)
print(e)
print(f)
print(g)

a = npy.array([2, 4, 6, 8, 10])
mean_num = npy.mean(a)
print(mean_num)

#standard deviation
a = npy.array([1, 2, 3, 4, 5])
s = npy.std(a)
print(s)

a = npy.array([1, 2, 3])
b = npy.array([1, 4, 5])
d = npy.dot(a, b)
print(d)

a = npy.array([[1, 3], [5, 8]])
j = npy.linalg.inv(a)
print(j)

a = npy.array([2, 2, 2])
b = npy.array([2, 3, 4])
c = npy.power(a, b)
print(c)

a = npy.array([8, 8, 8])
b = npy.array([2, 3, 4])
c = npy.mod(a, b)
print(c)

a = npy.array([-10, -20, -30])
b = npy.abs(a)
print(b)

a = npy.array([10, 20, 30])
sum_num = npy.sum(a)
print(sum_num)

min = npy.min(a)
print(min)

max = npy.max(a)
print(max)

a = npy.array([1, 2])
cos1 = npy.cos(a)
sin1=npy.sin(a)

print(cos1)
print(sin1)

a = npy.array([1, 2, 3])
b = 2
result1 = a + b
print(result1)

x = npy.array([[1, 2, 3], [4, 5, 6]])
y = npy.array([10, 20, 30])
result2 = x + y
print(result2)

arr = npy.array([101, 202, 303, 404, 505])
print(arr[0])
print(arr[2])
print(arr[-1])


print(arr[1:4])
print(arr[:3])
print(arr[2:])

arr2d = npy.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])
print(arr2d[0, 1])
print(arr2d[1, :])
print(arr2d[:, 2])

arr3 = npy.array([[2, 3], [3, 4], [5, 6]])
for row in arr3:
  print(row)

arr_1 = npy.array([[1, 2], [3, 4]])
arr_2 = npy.copy(arr_1)
print("Original nested array:\n", arr3)

arr = npy.array([100, 200, 300, 400, 500])
for element in arr:
  print(element)

arr2 = npy.array([100, 200, 300, 400, 500])
for x in npy.nditer(arr2):
  print(x)

# Define arr_0 and create a deep copy arr_00
arr_0 = npy.array([[1, 2], [3, 4]])
arr_00 = npy.copy(arr_0)

arr_0[0, 0] = 10  # Now you can modify arr_0

print("\nOriginal nested array:\n", arr_0)
print("\nDeep copied nested array:\n", arr_00)

arr_01 = npy.array([1, 2, 3])
arr_02 = npy.array([4, 5, 6])
result = npy.concatenate((arr_01, arr_02))
print(result1)

arr = npy.array([1, 2, 3, 6, 5, 8, 4])
x = npy.where(arr == 3)
print(x)

y = npy.where(arr > 4)
print(y)

arr_sorted = npy.array([2, 4, 6, 8, 10,12])
index = npy.searchsorted(arr_sorted, 7)
print(index)

arr = npy.array([2, 4, 6, 8, 10, 12, 14])

value = 6

indices = npy.where(arr == value)
print("Indices of", value, ":", indices[0])

if value in arr:
  print(value, "is present in the array.")
else:
  print(value, "is not present in the array.")

arr1 = npy.array([30, 1, 94, 25, 59])
sorted_arr1 = npy.sort(arr1)
print("Sorted 1D array:", sorted_arr1)


arr2 = npy.array([[4, 1, 3], [2, 6, 5]])
sorted_arr2_rows = npy.sort(arr2, axis=1)
print("\nSorted 2D array along rows:\n", sorted_arr2_rows)


sorted_arr2_cols = npy.sort(arr2, axis=0)
print("\nSorted 2D array along columns:\n", sorted_arr2_cols)

# Shuffle
arr = npy.array([11, 12, 13, 14, 15])
npy.random.shuffle(arr)
print("Shuffled array:", arr)

# Unique
unique_values = npy.unique(arr)
print("Unique values:", unique_values)

# Resize
resized_arr = npy.resize(arr, (3, 3))
print("Resized array:\n", resized_arr)

# Flatten
arr = npy.array([[14, 24], [33, 64]])
flattened_arr = arr.flatten()
print("Flattened array:", flattened_arr)

# Ravel
arr = npy.array([[16, 72], [13, 54]])
raveled_arr = arr.ravel()
print("Raveled array:", raveled_arr)

a = npy.array([2, 4, 6, 8, 10])
median_num = npy.median(a)
print(median_num)